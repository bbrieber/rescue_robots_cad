<?xml version="1.0"?>

<launch>
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="R" default="0"/>
  <arg name="P" default="0"/>
  <arg name="Y" default="0"/>
  <arg name="robot_name" default="Donkey"/>
  <arg name="use_ns" default="true" />
  
  
  <arg name="load_controller" default="true" />
  <arg name="load_moveit" default="false" />
  <arg name="use_sensors" default="false" />
<arg name="use_pad" default="true" />
  
  <arg name="robot_namespace" default="sherpa_rover"/>
  <!--
    <param name="robot_description" textfile="$(find sherpa_rover_description)/urdf/sherpa_rover.urdf" />
  <arg name="model" default="$(find sherpa_rover_description)/urdf/sherpa_rover.urdf.xacro"/>
  -->
  <arg name="model" default="$(find sherpa_rover_description)/urdf/donkey.urdf.xacro"/>
   <!-- send the robot XML to param server -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(arg model)' prefix:=$(arg robot_namespace)" />
  
  <!--  
  <include file="$(find hector_quadrotor_teleop)/launch/logitech_gamepad.launch" if="$(arg use_pad)"/>           
-->
   <rosparam if="$(arg load_controller)" file="$(find sherpa_rover_control)/config/cmd_controller.yaml"  command="load" />
   <group if="$(arg load_moveit)">
        <node name="base_controller" pkg="moveit_cmd_vel_controller" type="moveit_flight_controller_node" output="screen">
        </node>
        <include file="$(find sherpa_rover_moveit_config)/launch/rover_moveit.launch" />
  </group>
  <node if="$(arg use_ns)" name="spawn_rover" pkg="gazebo_ros" type="spawn_model" args="
    -param robot_description 
    -urdf 
    -x $(arg x) 
    -y $(arg y) 
    -z $(arg z) 
    -R $(arg R) 
    -P $(arg P) 
    -Y $(arg Y) 
    -model $(arg robot_name) 
    -robot_namespace $(arg robot_namespace)
  "/>
  
  <node unless="$(arg use_ns)" name="spawn_rover" pkg="gazebo_ros" type="spawn_model" args="
    -param robot_description 
    -urdf 
    -x $(arg x) 
    -y $(arg y) 
    -z $(arg z) 
    -R $(arg R) 
    -P $(arg P) 
    -Y $(arg Y) 
    -model $(arg robot_name) "/> 
  
  
  <rosparam if="$(arg load_controller)" file="$(find sherpa_rover_control)/config/sherpa_rover_ros_arm_control2.yaml"  command="load" />
          <!--output="screen" ns="/$(arg robot_namespace)" args="-->
  <node if="$(arg load_controller)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/$(arg robot_namespace)" args="
        joint_state_controller


        back_right_wheel_controller back_left_wheel_controller front_right_wheel_controller front_left_wheel_controller
            ">
  </node>
<!--       

        arm_controller        

arm_base_to_lower_controller arm_lower_to_upper_controller arm_upper_to_gripper_controller         

front_left_chain_controller front_right_chain_controller back_left_chain_controller back_right_chain_controller

arm_base_to_lower_controller arm_lower_to_upper_controller arm_upper_to_gripper_controller 


        back_right_wheel_controller back_left_wheel_controller front_right_wheel_controller front_left_wheel_controller front_left_chain_controller front_right_chain_controller back_left_chain_controller back_right_chain_controller


arm_base_to_lower_controller arm_lower_to_upper_controller arm_upper_to_gripper_controller 
    -->
   
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen" >
     <param name="publish_frequency" type="double" value="50.0" />
     <param name="tf_prefix" type="string" value="$(arg robot_namespace)" />
   </node>
   
   
   <group if="$(arg use_sensors)">
  <node type="laser_scan_assembler" pkg="laser_assembler"
        name="my_assembler">
    <remap from="scan" to="tilt_scan"/>
    <param name="max_scans" type="int" value="400" />
    <param name="fixed_frame" type="string" value="nav" />
  </node>
    
    <node name="periodic_snapshoter" pkg="sherpa_utils"  type="periodic_snapshoter" respawn="false" output="screen" />
</group>
</launch>
